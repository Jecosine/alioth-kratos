// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (a *Announcement) Author(ctx context.Context) (*User, error) {
	result, err := a.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAuthor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Announcement) Team(ctx context.Context) (*Team, error) {
	result, err := a.Edges.TeamOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryTeam().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JudgeRecord) User(ctx context.Context) ([]*User, error) {
	result, err := jr.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryUser().All(ctx)
	}
	return result, err
}

func (pr *Problem) Author(ctx context.Context) (*User, error) {
	result, err := pr.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryAuthor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Problem) SolvedBy(ctx context.Context) ([]*User, error) {
	result, err := pr.Edges.SolvedByOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QuerySolvedBy().All(ctx)
	}
	return result, err
}

func (pr *Problem) Tags(ctx context.Context) ([]*Tag, error) {
	result, err := pr.Edges.TagsOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryTags().All(ctx)
	}
	return result, err
}

func (t *Tag) Problems(ctx context.Context) ([]*Problem, error) {
	result, err := t.Edges.ProblemsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProblems().All(ctx)
	}
	return result, err
}

func (t *Team) Members(ctx context.Context) ([]*User, error) {
	result, err := t.Edges.MembersOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryMembers().All(ctx)
	}
	return result, err
}

func (t *Team) Announcements(ctx context.Context) ([]*Announcement, error) {
	result, err := t.Edges.AnnouncementsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAnnouncements().All(ctx)
	}
	return result, err
}

func (u *User) Teams(ctx context.Context) ([]*Team, error) {
	result, err := u.Edges.TeamsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTeams().All(ctx)
	}
	return result, err
}

func (u *User) Announcements(ctx context.Context) (*Announcement, error) {
	result, err := u.Edges.AnnouncementsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryAnnouncements().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Records(ctx context.Context) (*JudgeRecord, error) {
	result, err := u.Edges.RecordsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryRecords().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) CreatedProblems(ctx context.Context) ([]*Problem, error) {
	result, err := u.Edges.CreatedProblemsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryCreatedProblems().All(ctx)
	}
	return result, err
}

func (u *User) SolvedProblems(ctx context.Context) ([]*Problem, error) {
	result, err := u.Edges.SolvedProblemsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySolvedProblems().All(ctx)
	}
	return result, err
}
