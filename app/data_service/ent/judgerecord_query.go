// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/judgerecord"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/predicate"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/user"
)

// JudgeRecordQuery is the builder for querying JudgeRecord entities.
type JudgeRecordQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.JudgeRecord
	// eager-loading edges.
	withUser *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JudgeRecordQuery builder.
func (jrq *JudgeRecordQuery) Where(ps ...predicate.JudgeRecord) *JudgeRecordQuery {
	jrq.predicates = append(jrq.predicates, ps...)
	return jrq
}

// Limit adds a limit step to the query.
func (jrq *JudgeRecordQuery) Limit(limit int) *JudgeRecordQuery {
	jrq.limit = &limit
	return jrq
}

// Offset adds an offset step to the query.
func (jrq *JudgeRecordQuery) Offset(offset int) *JudgeRecordQuery {
	jrq.offset = &offset
	return jrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jrq *JudgeRecordQuery) Unique(unique bool) *JudgeRecordQuery {
	jrq.unique = &unique
	return jrq
}

// Order adds an order step to the query.
func (jrq *JudgeRecordQuery) Order(o ...OrderFunc) *JudgeRecordQuery {
	jrq.order = append(jrq.order, o...)
	return jrq
}

// QueryUser chains the current query on the "user" edge.
func (jrq *JudgeRecordQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: jrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(judgerecord.Table, judgerecord.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, judgerecord.UserTable, judgerecord.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JudgeRecord entity from the query.
// Returns a *NotFoundError when no JudgeRecord was found.
func (jrq *JudgeRecordQuery) First(ctx context.Context) (*JudgeRecord, error) {
	nodes, err := jrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{judgerecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jrq *JudgeRecordQuery) FirstX(ctx context.Context) *JudgeRecord {
	node, err := jrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JudgeRecord ID from the query.
// Returns a *NotFoundError when no JudgeRecord ID was found.
func (jrq *JudgeRecordQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = jrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{judgerecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jrq *JudgeRecordQuery) FirstIDX(ctx context.Context) int64 {
	id, err := jrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JudgeRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JudgeRecord entity is found.
// Returns a *NotFoundError when no JudgeRecord entities are found.
func (jrq *JudgeRecordQuery) Only(ctx context.Context) (*JudgeRecord, error) {
	nodes, err := jrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{judgerecord.Label}
	default:
		return nil, &NotSingularError{judgerecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jrq *JudgeRecordQuery) OnlyX(ctx context.Context) *JudgeRecord {
	node, err := jrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JudgeRecord ID in the query.
// Returns a *NotSingularError when more than one JudgeRecord ID is found.
// Returns a *NotFoundError when no entities are found.
func (jrq *JudgeRecordQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = jrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = &NotSingularError{judgerecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jrq *JudgeRecordQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := jrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JudgeRecords.
func (jrq *JudgeRecordQuery) All(ctx context.Context) ([]*JudgeRecord, error) {
	if err := jrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return jrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (jrq *JudgeRecordQuery) AllX(ctx context.Context) []*JudgeRecord {
	nodes, err := jrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JudgeRecord IDs.
func (jrq *JudgeRecordQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := jrq.Select(judgerecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jrq *JudgeRecordQuery) IDsX(ctx context.Context) []int64 {
	ids, err := jrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jrq *JudgeRecordQuery) Count(ctx context.Context) (int, error) {
	if err := jrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return jrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (jrq *JudgeRecordQuery) CountX(ctx context.Context) int {
	count, err := jrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jrq *JudgeRecordQuery) Exist(ctx context.Context) (bool, error) {
	if err := jrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return jrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (jrq *JudgeRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := jrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JudgeRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jrq *JudgeRecordQuery) Clone() *JudgeRecordQuery {
	if jrq == nil {
		return nil
	}
	return &JudgeRecordQuery{
		config:     jrq.config,
		limit:      jrq.limit,
		offset:     jrq.offset,
		order:      append([]OrderFunc{}, jrq.order...),
		predicates: append([]predicate.JudgeRecord{}, jrq.predicates...),
		withUser:   jrq.withUser.Clone(),
		// clone intermediate query.
		sql:    jrq.sql.Clone(),
		path:   jrq.path,
		unique: jrq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JudgeRecordQuery) WithUser(opts ...func(*UserQuery)) *JudgeRecordQuery {
	query := &UserQuery{config: jrq.config}
	for _, opt := range opts {
		opt(query)
	}
	jrq.withUser = query
	return jrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		JudgeTime time.Time `json:"judge_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JudgeRecord.Query().
//		GroupBy(judgerecord.FieldJudgeTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (jrq *JudgeRecordQuery) GroupBy(field string, fields ...string) *JudgeRecordGroupBy {
	group := &JudgeRecordGroupBy{config: jrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return jrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		JudgeTime time.Time `json:"judge_time,omitempty"`
//	}
//
//	client.JudgeRecord.Query().
//		Select(judgerecord.FieldJudgeTime).
//		Scan(ctx, &v)
//
func (jrq *JudgeRecordQuery) Select(fields ...string) *JudgeRecordSelect {
	jrq.fields = append(jrq.fields, fields...)
	return &JudgeRecordSelect{JudgeRecordQuery: jrq}
}

func (jrq *JudgeRecordQuery) prepareQuery(ctx context.Context) error {
	for _, f := range jrq.fields {
		if !judgerecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jrq.path != nil {
		prev, err := jrq.path(ctx)
		if err != nil {
			return err
		}
		jrq.sql = prev
	}
	return nil
}

func (jrq *JudgeRecordQuery) sqlAll(ctx context.Context) ([]*JudgeRecord, error) {
	var (
		nodes       = []*JudgeRecord{}
		_spec       = jrq.querySpec()
		loadedTypes = [1]bool{
			jrq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &JudgeRecord{config: jrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, jrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := jrq.withUser; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*JudgeRecord)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.User = []*User{}
		}
		query.withFKs = true
		query.Where(predicate.User(func(s *sql.Selector) {
			s.Where(sql.InValues(judgerecord.UserColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.judge_record_user
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "judge_record_user" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "judge_record_user" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.User = append(node.Edges.User, n)
		}
	}

	return nodes, nil
}

func (jrq *JudgeRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jrq.querySpec()
	_spec.Node.Columns = jrq.fields
	if len(jrq.fields) > 0 {
		_spec.Unique = jrq.unique != nil && *jrq.unique
	}
	return sqlgraph.CountNodes(ctx, jrq.driver, _spec)
}

func (jrq *JudgeRecordQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := jrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (jrq *JudgeRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   judgerecord.Table,
			Columns: judgerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: judgerecord.FieldID,
			},
		},
		From:   jrq.sql,
		Unique: true,
	}
	if unique := jrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := jrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, judgerecord.FieldID)
		for i := range fields {
			if fields[i] != judgerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jrq *JudgeRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jrq.driver.Dialect())
	t1 := builder.Table(judgerecord.Table)
	columns := jrq.fields
	if len(columns) == 0 {
		columns = judgerecord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jrq.sql != nil {
		selector = jrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jrq.unique != nil && *jrq.unique {
		selector.Distinct()
	}
	for _, p := range jrq.predicates {
		p(selector)
	}
	for _, p := range jrq.order {
		p(selector)
	}
	if offset := jrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JudgeRecordGroupBy is the group-by builder for JudgeRecord entities.
type JudgeRecordGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jrgb *JudgeRecordGroupBy) Aggregate(fns ...AggregateFunc) *JudgeRecordGroupBy {
	jrgb.fns = append(jrgb.fns, fns...)
	return jrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (jrgb *JudgeRecordGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := jrgb.path(ctx)
	if err != nil {
		return err
	}
	jrgb.sql = query
	return jrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := jrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(jrgb.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := jrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) StringsX(ctx context.Context) []string {
	v, err := jrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = jrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) StringX(ctx context.Context) string {
	v, err := jrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(jrgb.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := jrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) IntsX(ctx context.Context) []int {
	v, err := jrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = jrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) IntX(ctx context.Context) int {
	v, err := jrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(jrgb.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := jrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := jrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = jrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) Float64X(ctx context.Context) float64 {
	v, err := jrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(jrgb.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := jrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := jrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (jrgb *JudgeRecordGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = jrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (jrgb *JudgeRecordGroupBy) BoolX(ctx context.Context) bool {
	v, err := jrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jrgb *JudgeRecordGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range jrgb.fields {
		if !judgerecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := jrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (jrgb *JudgeRecordGroupBy) sqlQuery() *sql.Selector {
	selector := jrgb.sql.Select()
	aggregation := make([]string, 0, len(jrgb.fns))
	for _, fn := range jrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(jrgb.fields)+len(jrgb.fns))
		for _, f := range jrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(jrgb.fields...)...)
}

// JudgeRecordSelect is the builder for selecting fields of JudgeRecord entities.
type JudgeRecordSelect struct {
	*JudgeRecordQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (jrs *JudgeRecordSelect) Scan(ctx context.Context, v interface{}) error {
	if err := jrs.prepareQuery(ctx); err != nil {
		return err
	}
	jrs.sql = jrs.JudgeRecordQuery.sqlQuery(ctx)
	return jrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jrs *JudgeRecordSelect) ScanX(ctx context.Context, v interface{}) {
	if err := jrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Strings(ctx context.Context) ([]string, error) {
	if len(jrs.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := jrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jrs *JudgeRecordSelect) StringsX(ctx context.Context) []string {
	v, err := jrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = jrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (jrs *JudgeRecordSelect) StringX(ctx context.Context) string {
	v, err := jrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Ints(ctx context.Context) ([]int, error) {
	if len(jrs.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := jrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jrs *JudgeRecordSelect) IntsX(ctx context.Context) []int {
	v, err := jrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = jrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (jrs *JudgeRecordSelect) IntX(ctx context.Context) int {
	v, err := jrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(jrs.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := jrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jrs *JudgeRecordSelect) Float64sX(ctx context.Context) []float64 {
	v, err := jrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = jrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (jrs *JudgeRecordSelect) Float64X(ctx context.Context) float64 {
	v, err := jrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(jrs.fields) > 1 {
		return nil, errors.New("ent: JudgeRecordSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := jrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jrs *JudgeRecordSelect) BoolsX(ctx context.Context) []bool {
	v, err := jrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (jrs *JudgeRecordSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = jrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{judgerecord.Label}
	default:
		err = fmt.Errorf("ent: JudgeRecordSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (jrs *JudgeRecordSelect) BoolX(ctx context.Context) bool {
	v, err := jrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jrs *JudgeRecordSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := jrs.sql.Query()
	if err := jrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
