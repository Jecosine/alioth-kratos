// Code generated by entc, DO NOT EDIT.

package announcement

import (
	"time"
)

const (
	// Label holds the string label denoting the announcement type in the database.
	Label = "announcement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCreatedTime holds the string denoting the createdtime field in the database.
	FieldCreatedTime = "created_time"
	// FieldModifiedTime holds the string denoting the modifiedtime field in the database.
	FieldModifiedTime = "modified_time"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the announcement in the database.
	Table = "announcements"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "users"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "announcement_author"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "announcements"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "announcement_team"
)

// Columns holds all SQL columns for announcement fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
	FieldCreatedTime,
	FieldModifiedTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "announcements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"announcement_team",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultCreatedTime holds the default value on creation for the "createdTime" field.
	DefaultCreatedTime time.Time
	// DefaultModifiedTime holds the default value on creation for the "modifiedTime" field.
	DefaultModifiedTime time.Time
)
