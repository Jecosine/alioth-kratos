// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/judgerecord"
)

// JudgeRecord is the model entity for the JudgeRecord schema.
type JudgeRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// JudgeTime holds the value of the "judge_time" field.
	JudgeTime time.Time `json:"judge_time,omitempty"`
	// FinishedTime holds the value of the "finished_time" field.
	FinishedTime time.Time `json:"finished_time,omitempty"`
	// TimeCost holds the value of the "time_cost" field.
	TimeCost int64 `json:"time_cost,omitempty"`
	// MemoryCost holds the value of the "memory_cost" field.
	MemoryCost int64 `json:"memory_cost,omitempty"`
	// Status holds the value of the "status" field.
	Status int64 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JudgeRecordQuery when eager-loading is set.
	Edges JudgeRecordEdges `json:"edges"`
}

// JudgeRecordEdges holds the relations/edges for other nodes in the graph.
type JudgeRecordEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e JudgeRecordEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JudgeRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case judgerecord.FieldID, judgerecord.FieldTimeCost, judgerecord.FieldMemoryCost, judgerecord.FieldStatus:
			values[i] = new(sql.NullInt64)
		case judgerecord.FieldJudgeTime, judgerecord.FieldFinishedTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type JudgeRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JudgeRecord fields.
func (jr *JudgeRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case judgerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jr.ID = int64(value.Int64)
		case judgerecord.FieldJudgeTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field judge_time", values[i])
			} else if value.Valid {
				jr.JudgeTime = value.Time
			}
		case judgerecord.FieldFinishedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_time", values[i])
			} else if value.Valid {
				jr.FinishedTime = value.Time
			}
		case judgerecord.FieldTimeCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_cost", values[i])
			} else if value.Valid {
				jr.TimeCost = value.Int64
			}
		case judgerecord.FieldMemoryCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_cost", values[i])
			} else if value.Valid {
				jr.MemoryCost = value.Int64
			}
		case judgerecord.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				jr.Status = value.Int64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the JudgeRecord entity.
func (jr *JudgeRecord) QueryUser() *UserQuery {
	return (&JudgeRecordClient{config: jr.config}).QueryUser(jr)
}

// Update returns a builder for updating this JudgeRecord.
// Note that you need to call JudgeRecord.Unwrap() before calling this method if this JudgeRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (jr *JudgeRecord) Update() *JudgeRecordUpdateOne {
	return (&JudgeRecordClient{config: jr.config}).UpdateOne(jr)
}

// Unwrap unwraps the JudgeRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jr *JudgeRecord) Unwrap() *JudgeRecord {
	tx, ok := jr.config.driver.(*txDriver)
	if !ok {
		panic("ent: JudgeRecord is not a transactional entity")
	}
	jr.config.driver = tx.drv
	return jr
}

// String implements the fmt.Stringer.
func (jr *JudgeRecord) String() string {
	var builder strings.Builder
	builder.WriteString("JudgeRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", jr.ID))
	builder.WriteString(", judge_time=")
	builder.WriteString(jr.JudgeTime.Format(time.ANSIC))
	builder.WriteString(", finished_time=")
	builder.WriteString(jr.FinishedTime.Format(time.ANSIC))
	builder.WriteString(", time_cost=")
	builder.WriteString(fmt.Sprintf("%v", jr.TimeCost))
	builder.WriteString(", memory_cost=")
	builder.WriteString(fmt.Sprintf("%v", jr.MemoryCost))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", jr.Status))
	builder.WriteByte(')')
	return builder.String()
}

// JudgeRecords is a parsable slice of JudgeRecord.
type JudgeRecords []*JudgeRecord

func (jr JudgeRecords) config(cfg config) {
	for _i := range jr {
		jr[_i].config = cfg
	}
}
