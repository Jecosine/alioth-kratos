// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/problem"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/user"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemQuery when eager-loading is set.
	Edges                 ProblemEdges `json:"edges"`
	user_created_problems *int64
}

// ProblemEdges holds the relations/edges for other nodes in the graph.
type ProblemEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// SolvedBy holds the value of the solved_by edge.
	SolvedBy []*User `json:"solved_by,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// SolvedByOrErr returns the SolvedBy value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) SolvedByOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.SolvedBy, nil
	}
	return nil, &NotLoadedError{edge: "solved_by"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[2] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case problem.FieldID:
			values[i] = new(sql.NullInt64)
		case problem.FieldTitle, problem.FieldContent:
			values[i] = new(sql.NullString)
		case problem.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		case problem.ForeignKeys[0]: // user_created_problems
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Problem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case problem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case problem.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pr.Content = value.String
			}
		case problem.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pr.CreatedTime = value.Time
			}
		case problem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_problems", value)
			} else if value.Valid {
				pr.user_created_problems = new(int64)
				*pr.user_created_problems = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the Problem entity.
func (pr *Problem) QueryAuthor() *UserQuery {
	return (&ProblemClient{config: pr.config}).QueryAuthor(pr)
}

// QuerySolvedBy queries the "solved_by" edge of the Problem entity.
func (pr *Problem) QuerySolvedBy() *UserQuery {
	return (&ProblemClient{config: pr.config}).QuerySolvedBy(pr)
}

// QueryTags queries the "tags" edge of the Problem entity.
func (pr *Problem) QueryTags() *TagQuery {
	return (&ProblemClient{config: pr.config}).QueryTags(pr)
}

// Update returns a builder for updating this Problem.
// Note that you need to call Problem.Unwrap() before calling this method if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return (&ProblemClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Problem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", content=")
	builder.WriteString(pr.Content)
	builder.WriteString(", created_time=")
	builder.WriteString(pr.CreatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem

func (pr Problems) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
