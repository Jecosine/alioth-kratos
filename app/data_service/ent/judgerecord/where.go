// Code generated by entc, DO NOT EDIT.

package judgerecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// JudgeTime applies equality check predicate on the "judge_time" field. It's identical to JudgeTimeEQ.
func JudgeTime(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudgeTime), v))
	})
}

// FinishedTime applies equality check predicate on the "finished_time" field. It's identical to FinishedTimeEQ.
func FinishedTime(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishedTime), v))
	})
}

// TimeCost applies equality check predicate on the "time_cost" field. It's identical to TimeCostEQ.
func TimeCost(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeCost), v))
	})
}

// MemoryCost applies equality check predicate on the "memory_cost" field. It's identical to MemoryCostEQ.
func MemoryCost(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemoryCost), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// JudgeTimeEQ applies the EQ predicate on the "judge_time" field.
func JudgeTimeEQ(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudgeTime), v))
	})
}

// JudgeTimeNEQ applies the NEQ predicate on the "judge_time" field.
func JudgeTimeNEQ(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJudgeTime), v))
	})
}

// JudgeTimeIn applies the In predicate on the "judge_time" field.
func JudgeTimeIn(vs ...time.Time) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJudgeTime), v...))
	})
}

// JudgeTimeNotIn applies the NotIn predicate on the "judge_time" field.
func JudgeTimeNotIn(vs ...time.Time) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJudgeTime), v...))
	})
}

// JudgeTimeGT applies the GT predicate on the "judge_time" field.
func JudgeTimeGT(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJudgeTime), v))
	})
}

// JudgeTimeGTE applies the GTE predicate on the "judge_time" field.
func JudgeTimeGTE(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJudgeTime), v))
	})
}

// JudgeTimeLT applies the LT predicate on the "judge_time" field.
func JudgeTimeLT(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJudgeTime), v))
	})
}

// JudgeTimeLTE applies the LTE predicate on the "judge_time" field.
func JudgeTimeLTE(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJudgeTime), v))
	})
}

// FinishedTimeEQ applies the EQ predicate on the "finished_time" field.
func FinishedTimeEQ(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishedTime), v))
	})
}

// FinishedTimeNEQ applies the NEQ predicate on the "finished_time" field.
func FinishedTimeNEQ(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinishedTime), v))
	})
}

// FinishedTimeIn applies the In predicate on the "finished_time" field.
func FinishedTimeIn(vs ...time.Time) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinishedTime), v...))
	})
}

// FinishedTimeNotIn applies the NotIn predicate on the "finished_time" field.
func FinishedTimeNotIn(vs ...time.Time) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinishedTime), v...))
	})
}

// FinishedTimeGT applies the GT predicate on the "finished_time" field.
func FinishedTimeGT(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinishedTime), v))
	})
}

// FinishedTimeGTE applies the GTE predicate on the "finished_time" field.
func FinishedTimeGTE(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinishedTime), v))
	})
}

// FinishedTimeLT applies the LT predicate on the "finished_time" field.
func FinishedTimeLT(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinishedTime), v))
	})
}

// FinishedTimeLTE applies the LTE predicate on the "finished_time" field.
func FinishedTimeLTE(v time.Time) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinishedTime), v))
	})
}

// TimeCostEQ applies the EQ predicate on the "time_cost" field.
func TimeCostEQ(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeCost), v))
	})
}

// TimeCostNEQ applies the NEQ predicate on the "time_cost" field.
func TimeCostNEQ(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeCost), v))
	})
}

// TimeCostIn applies the In predicate on the "time_cost" field.
func TimeCostIn(vs ...int64) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeCost), v...))
	})
}

// TimeCostNotIn applies the NotIn predicate on the "time_cost" field.
func TimeCostNotIn(vs ...int64) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeCost), v...))
	})
}

// TimeCostGT applies the GT predicate on the "time_cost" field.
func TimeCostGT(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeCost), v))
	})
}

// TimeCostGTE applies the GTE predicate on the "time_cost" field.
func TimeCostGTE(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeCost), v))
	})
}

// TimeCostLT applies the LT predicate on the "time_cost" field.
func TimeCostLT(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeCost), v))
	})
}

// TimeCostLTE applies the LTE predicate on the "time_cost" field.
func TimeCostLTE(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeCost), v))
	})
}

// MemoryCostEQ applies the EQ predicate on the "memory_cost" field.
func MemoryCostEQ(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemoryCost), v))
	})
}

// MemoryCostNEQ applies the NEQ predicate on the "memory_cost" field.
func MemoryCostNEQ(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemoryCost), v))
	})
}

// MemoryCostIn applies the In predicate on the "memory_cost" field.
func MemoryCostIn(vs ...int64) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemoryCost), v...))
	})
}

// MemoryCostNotIn applies the NotIn predicate on the "memory_cost" field.
func MemoryCostNotIn(vs ...int64) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemoryCost), v...))
	})
}

// MemoryCostGT applies the GT predicate on the "memory_cost" field.
func MemoryCostGT(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemoryCost), v))
	})
}

// MemoryCostGTE applies the GTE predicate on the "memory_cost" field.
func MemoryCostGTE(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemoryCost), v))
	})
}

// MemoryCostLT applies the LT predicate on the "memory_cost" field.
func MemoryCostLT(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemoryCost), v))
	})
}

// MemoryCostLTE applies the LTE predicate on the "memory_cost" field.
func MemoryCostLTE(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemoryCost), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.JudgeRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JudgeRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JudgeRecord) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JudgeRecord) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JudgeRecord) predicate.JudgeRecord {
	return predicate.JudgeRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
