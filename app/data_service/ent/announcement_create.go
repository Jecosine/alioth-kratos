// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/announcement"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/user"
)

// AnnouncementCreate is the builder for creating a Announcement entity.
type AnnouncementCreate struct {
	config
	mutation *AnnouncementMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ac *AnnouncementCreate) SetTitle(s string) *AnnouncementCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetContent sets the "content" field.
func (ac *AnnouncementCreate) SetContent(s string) *AnnouncementCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetCreatedTime sets the "createdTime" field.
func (ac *AnnouncementCreate) SetCreatedTime(t time.Time) *AnnouncementCreate {
	ac.mutation.SetCreatedTime(t)
	return ac
}

// SetNillableCreatedTime sets the "createdTime" field if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableCreatedTime(t *time.Time) *AnnouncementCreate {
	if t != nil {
		ac.SetCreatedTime(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AnnouncementCreate) SetID(i int64) *AnnouncementCreate {
	ac.mutation.SetID(i)
	return ac
}

// AddAuthorIDs adds the "author" edge to the User entity by IDs.
func (ac *AnnouncementCreate) AddAuthorIDs(ids ...int64) *AnnouncementCreate {
	ac.mutation.AddAuthorIDs(ids...)
	return ac
}

// AddAuthor adds the "author" edges to the User entity.
func (ac *AnnouncementCreate) AddAuthor(u ...*User) *AnnouncementCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddAuthorIDs(ids...)
}

// Mutation returns the AnnouncementMutation object of the builder.
func (ac *AnnouncementCreate) Mutation() *AnnouncementMutation {
	return ac.mutation
}

// Save creates the Announcement in the database.
func (ac *AnnouncementCreate) Save(ctx context.Context) (*Announcement, error) {
	var (
		err  error
		node *Announcement
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnnouncementCreate) SaveX(ctx context.Context) *Announcement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AnnouncementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AnnouncementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AnnouncementCreate) defaults() {
	if _, ok := ac.mutation.CreatedTime(); !ok {
		v := announcement.DefaultCreatedTime
		ac.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnnouncementCreate) check() error {
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Announcement.title"`)}
	}
	if v, ok := ac.mutation.Title(); ok {
		if err := announcement.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Announcement.title": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Announcement.content"`)}
	}
	if _, ok := ac.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "createdTime", err: errors.New(`ent: missing required field "Announcement.createdTime"`)}
	}
	return nil
}

func (ac *AnnouncementCreate) sqlSave(ctx context.Context) (*Announcement, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ac *AnnouncementCreate) createSpec() (*Announcement, *sqlgraph.CreateSpec) {
	var (
		_node = &Announcement{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: announcement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: announcement.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ac.mutation.CreatedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: announcement.FieldCreatedTime,
		})
		_node.CreatedTime = value
	}
	if nodes := ac.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   announcement.AuthorTable,
			Columns: []string{announcement.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AnnouncementCreateBulk is the builder for creating many Announcement entities in bulk.
type AnnouncementCreateBulk struct {
	config
	builders []*AnnouncementCreate
}

// Save creates the Announcement entities in the database.
func (acb *AnnouncementCreateBulk) Save(ctx context.Context) ([]*Announcement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Announcement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnnouncementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnnouncementCreateBulk) SaveX(ctx context.Context) []*Announcement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AnnouncementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AnnouncementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
