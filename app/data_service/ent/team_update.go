// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/announcement"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/predicate"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/team"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/user"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TeamUpdate) SetDescription(s string) *TeamUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetPrivate sets the "private" field.
func (tu *TeamUpdate) SetPrivate(b bool) *TeamUpdate {
	tu.mutation.SetPrivate(b)
	return tu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (tu *TeamUpdate) SetNillablePrivate(b *bool) *TeamUpdate {
	if b != nil {
		tu.SetPrivate(*b)
	}
	return tu
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (tu *TeamUpdate) AddMemberIDs(ids ...int64) *TeamUpdate {
	tu.mutation.AddMemberIDs(ids...)
	return tu
}

// AddMembers adds the "members" edges to the User entity.
func (tu *TeamUpdate) AddMembers(u ...*User) *TeamUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddMemberIDs(ids...)
}

// AddAnnouncementIDs adds the "announcements" edge to the Announcement entity by IDs.
func (tu *TeamUpdate) AddAnnouncementIDs(ids ...int64) *TeamUpdate {
	tu.mutation.AddAnnouncementIDs(ids...)
	return tu
}

// AddAnnouncements adds the "announcements" edges to the Announcement entity.
func (tu *TeamUpdate) AddAnnouncements(a ...*Announcement) *TeamUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddAnnouncementIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tu *TeamUpdate) SetCreatorID(id int64) *TeamUpdate {
	tu.mutation.SetCreatorID(id)
	return tu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableCreatorID(id *int64) *TeamUpdate {
	if id != nil {
		tu = tu.SetCreatorID(*id)
	}
	return tu
}

// SetCreator sets the "creator" edge to the User entity.
func (tu *TeamUpdate) SetCreator(u *User) *TeamUpdate {
	return tu.SetCreatorID(u.ID)
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (tu *TeamUpdate) AddAdminIDs(ids ...int64) *TeamUpdate {
	tu.mutation.AddAdminIDs(ids...)
	return tu
}

// AddAdmins adds the "admins" edges to the User entity.
func (tu *TeamUpdate) AddAdmins(u ...*User) *TeamUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddAdminIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (tu *TeamUpdate) ClearMembers() *TeamUpdate {
	tu.mutation.ClearMembers()
	return tu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (tu *TeamUpdate) RemoveMemberIDs(ids ...int64) *TeamUpdate {
	tu.mutation.RemoveMemberIDs(ids...)
	return tu
}

// RemoveMembers removes "members" edges to User entities.
func (tu *TeamUpdate) RemoveMembers(u ...*User) *TeamUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveMemberIDs(ids...)
}

// ClearAnnouncements clears all "announcements" edges to the Announcement entity.
func (tu *TeamUpdate) ClearAnnouncements() *TeamUpdate {
	tu.mutation.ClearAnnouncements()
	return tu
}

// RemoveAnnouncementIDs removes the "announcements" edge to Announcement entities by IDs.
func (tu *TeamUpdate) RemoveAnnouncementIDs(ids ...int64) *TeamUpdate {
	tu.mutation.RemoveAnnouncementIDs(ids...)
	return tu
}

// RemoveAnnouncements removes "announcements" edges to Announcement entities.
func (tu *TeamUpdate) RemoveAnnouncements(a ...*Announcement) *TeamUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveAnnouncementIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (tu *TeamUpdate) ClearCreator() *TeamUpdate {
	tu.mutation.ClearCreator()
	return tu
}

// ClearAdmins clears all "admins" edges to the User entity.
func (tu *TeamUpdate) ClearAdmins() *TeamUpdate {
	tu.mutation.ClearAdmins()
	return tu
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (tu *TeamUpdate) RemoveAdminIDs(ids ...int64) *TeamUpdate {
	tu.mutation.RemoveAdminIDs(ids...)
	return tu
}

// RemoveAdmins removes "admins" edges to User entities.
func (tu *TeamUpdate) RemoveAdmins(u ...*User) *TeamUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   team.Table,
			Columns: team.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: team.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldName,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Private(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: team.FieldPrivate,
		})
	}
	if tu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !tu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.AnnouncementsTable,
			Columns: []string{team.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAnnouncementsIDs(); len(nodes) > 0 && !tu.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.AnnouncementsTable,
			Columns: []string{team.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AnnouncementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.AnnouncementsTable,
			Columns: []string{team.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   team.CreatorTable,
			Columns: []string{team.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   team.CreatorTable,
			Columns: []string{team.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.AdminsTable,
			Columns: team.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !tu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.AdminsTable,
			Columns: team.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.AdminsTable,
			Columns: team.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TeamUpdateOne) SetDescription(s string) *TeamUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetPrivate sets the "private" field.
func (tuo *TeamUpdateOne) SetPrivate(b bool) *TeamUpdateOne {
	tuo.mutation.SetPrivate(b)
	return tuo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillablePrivate(b *bool) *TeamUpdateOne {
	if b != nil {
		tuo.SetPrivate(*b)
	}
	return tuo
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (tuo *TeamUpdateOne) AddMemberIDs(ids ...int64) *TeamUpdateOne {
	tuo.mutation.AddMemberIDs(ids...)
	return tuo
}

// AddMembers adds the "members" edges to the User entity.
func (tuo *TeamUpdateOne) AddMembers(u ...*User) *TeamUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddMemberIDs(ids...)
}

// AddAnnouncementIDs adds the "announcements" edge to the Announcement entity by IDs.
func (tuo *TeamUpdateOne) AddAnnouncementIDs(ids ...int64) *TeamUpdateOne {
	tuo.mutation.AddAnnouncementIDs(ids...)
	return tuo
}

// AddAnnouncements adds the "announcements" edges to the Announcement entity.
func (tuo *TeamUpdateOne) AddAnnouncements(a ...*Announcement) *TeamUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddAnnouncementIDs(ids...)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tuo *TeamUpdateOne) SetCreatorID(id int64) *TeamUpdateOne {
	tuo.mutation.SetCreatorID(id)
	return tuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableCreatorID(id *int64) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetCreatorID(*id)
	}
	return tuo
}

// SetCreator sets the "creator" edge to the User entity.
func (tuo *TeamUpdateOne) SetCreator(u *User) *TeamUpdateOne {
	return tuo.SetCreatorID(u.ID)
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (tuo *TeamUpdateOne) AddAdminIDs(ids ...int64) *TeamUpdateOne {
	tuo.mutation.AddAdminIDs(ids...)
	return tuo
}

// AddAdmins adds the "admins" edges to the User entity.
func (tuo *TeamUpdateOne) AddAdmins(u ...*User) *TeamUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddAdminIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (tuo *TeamUpdateOne) ClearMembers() *TeamUpdateOne {
	tuo.mutation.ClearMembers()
	return tuo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (tuo *TeamUpdateOne) RemoveMemberIDs(ids ...int64) *TeamUpdateOne {
	tuo.mutation.RemoveMemberIDs(ids...)
	return tuo
}

// RemoveMembers removes "members" edges to User entities.
func (tuo *TeamUpdateOne) RemoveMembers(u ...*User) *TeamUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveMemberIDs(ids...)
}

// ClearAnnouncements clears all "announcements" edges to the Announcement entity.
func (tuo *TeamUpdateOne) ClearAnnouncements() *TeamUpdateOne {
	tuo.mutation.ClearAnnouncements()
	return tuo
}

// RemoveAnnouncementIDs removes the "announcements" edge to Announcement entities by IDs.
func (tuo *TeamUpdateOne) RemoveAnnouncementIDs(ids ...int64) *TeamUpdateOne {
	tuo.mutation.RemoveAnnouncementIDs(ids...)
	return tuo
}

// RemoveAnnouncements removes "announcements" edges to Announcement entities.
func (tuo *TeamUpdateOne) RemoveAnnouncements(a ...*Announcement) *TeamUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveAnnouncementIDs(ids...)
}

// ClearCreator clears the "creator" edge to the User entity.
func (tuo *TeamUpdateOne) ClearCreator() *TeamUpdateOne {
	tuo.mutation.ClearCreator()
	return tuo
}

// ClearAdmins clears all "admins" edges to the User entity.
func (tuo *TeamUpdateOne) ClearAdmins() *TeamUpdateOne {
	tuo.mutation.ClearAdmins()
	return tuo
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (tuo *TeamUpdateOne) RemoveAdminIDs(ids ...int64) *TeamUpdateOne {
	tuo.mutation.RemoveAdminIDs(ids...)
	return tuo
}

// RemoveAdmins removes "admins" edges to User entities.
func (tuo *TeamUpdateOne) RemoveAdmins(u ...*User) *TeamUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveAdminIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	var (
		err  error
		node *Team
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   team.Table,
			Columns: team.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: team.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldName,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: team.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Private(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: team.FieldPrivate,
		})
	}
	if tuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !tuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.AnnouncementsTable,
			Columns: []string{team.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAnnouncementsIDs(); len(nodes) > 0 && !tuo.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.AnnouncementsTable,
			Columns: []string{team.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AnnouncementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.AnnouncementsTable,
			Columns: []string{team.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   team.CreatorTable,
			Columns: []string{team.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   team.CreatorTable,
			Columns: []string{team.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.AdminsTable,
			Columns: team.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !tuo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.AdminsTable,
			Columns: team.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.AdminsTable,
			Columns: team.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
