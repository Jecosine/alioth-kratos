// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Jecosine/alioth-kratos/app/data_service/ent/announcement"
)

// Announcement is the model entity for the Announcement schema.
type Announcement struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedTime holds the value of the "createdTime" field.
	CreatedTime time.Time `json:"createdTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnnouncementQuery when eager-loading is set.
	Edges AnnouncementEdges `json:"edges"`
}

// AnnouncementEdges holds the relations/edges for other nodes in the graph.
type AnnouncementEdges struct {
	// Author holds the value of the author edge.
	Author []*User `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading.
func (e AnnouncementEdges) AuthorOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Announcement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case announcement.FieldID:
			values[i] = new(sql.NullInt64)
		case announcement.FieldTitle, announcement.FieldContent:
			values[i] = new(sql.NullString)
		case announcement.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Announcement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Announcement fields.
func (a *Announcement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case announcement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case announcement.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case announcement.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				a.Content = value.String
			}
		case announcement.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdTime", values[i])
			} else if value.Valid {
				a.CreatedTime = value.Time
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the Announcement entity.
func (a *Announcement) QueryAuthor() *UserQuery {
	return (&AnnouncementClient{config: a.config}).QueryAuthor(a)
}

// Update returns a builder for updating this Announcement.
// Note that you need to call Announcement.Unwrap() before calling this method if this Announcement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Announcement) Update() *AnnouncementUpdateOne {
	return (&AnnouncementClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Announcement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Announcement) Unwrap() *Announcement {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Announcement is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Announcement) String() string {
	var builder strings.Builder
	builder.WriteString("Announcement(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", content=")
	builder.WriteString(a.Content)
	builder.WriteString(", createdTime=")
	builder.WriteString(a.CreatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Announcements is a parsable slice of Announcement.
type Announcements []*Announcement

func (a Announcements) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
