type Team {
    id: ID!
    name: String!
    description: String!
    creator: User!
    members: [User!]!
    admins: [User!]!
    createdTime: Time!
    announcements: [Announcement]
    private: Boolean!
}

enum TaskStatus {
    Expired,
    Finished,
    Waiting,
    Canceled,
}
enum TaskType {
    Problem,
    Custom,
    Meeting,
    Submission,
}

type Task {
    id: ID!,
    name: String!,
    taskType: TaskType,
    content: String,
    assignees: [User]!,
    status: TaskStatus!,
    parentList: TaskList,
}

type TaskList {
    id: ID!,
    name: String!,
    assignees: [User]!,
    deadline: Time!,
    status: TaskStatus!,
    relyTaskList: TaskList,
    tasks: [Task!]!,
}

input TeamInput {
    name: String!
    description: String!
    operatorId: ID!
    members: [ID]
    admins: [ID]
}
input TeamInputWithId {
    teamId: ID!
    name: String!
    description: String!
    operatorId: ID!
#    members: [ID]
#    admins: [ID]
}

extend type Mutation {
    addTeam(team: TeamInput!): Team
    updateTeam(team: TeamInputWithId!): Team
    setPrivate(private: Boolean!, teamId: ID!): Team @hasRole(role: TEAM_ADMIN)
    setAdmins(teamId: ID!, admins: [ID!]!): Reply @hasRole(role: TEAM_ADMIN)
    removeAdmins(teamId: ID!, admins: [ID!]!): Reply @hasRole(role: TEAM_OWNER)
    addMembers(teamId: ID!, members: [ID!]!): Reply @hasRole(role: TEAM_ADMIN)
    kickMembers(teamId: ID!, members: [ID!]!): Reply @hasRole(role: TEAM_ADMIN)
}

extend type Query {
    getTeamByName(teamName: String!): Team
    getTeamById(teamId: ID!): Team
    getAvailableTeams: [Team]!
    teamMembers(teamId: ID!): [User]! @hasRole(role: TEAM_MEMBER)
}