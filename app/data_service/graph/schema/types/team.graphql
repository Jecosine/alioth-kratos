type Team {
    id: ID!
    name: String!
    members: [User!]!
    createdTime: Time!
    announcements: [Announcement]
}

enum TaskStatus {
    Expired,
    Finished,
    Waiting,
    Canceled,
}
enum TaskType {
    Problem,
    Custom,
    Meeting,
    Submission,
}

type Task {
    id: ID!,
    name: String!,
    taskType: TaskType,
    content: String,
    assignees: [User]!,
    status: TaskStatus!,
    parentList: TaskList,
}

type TaskList {
    id: ID!,
    name: String!,
    assignees: [User]!,
    deadline: Time!,
    status: TaskStatus!,
    relyTaskList: TaskList,
    tasks: [Task!]!,
}

input TeamInput {
    name: String!
    members: [ID!]!
    authorId: ID!
}
extend type Team {
    addTeam(team: TeamInput!): Team
    updateTeam(team: TeamInput): Team

}

extend type Query {
    getTeamByName(teamName: String!): Team
    getTeamById(teamId: ID!): Team
    getAvailableTeams: [Team]!
    teamMembers(teamId: ID!): [User]! @hasRole(role: TEAM_MEMBER)
}