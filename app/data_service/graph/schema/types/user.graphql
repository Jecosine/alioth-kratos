type User {
    id: ID!
    nickname: String!
    email: String!
    password: String!
    avatar: String!
    createdTime: Time!
    teams: [Team]!
    managed: [Team]!
    owned: [Team]!
    announcements: [Announcement]!
    records: [JudgeRecord]!
    createdProblems: [Problem]!
    solvedProblems: [Problem]!
}
input UserInput {
    email: String!
    password: String!
}
enum RoleScope {
    GLOBAL
    TEAM
}
type Role {
    id: ID!
    name: String!
    scope: RoleScope
    privileges: [Privilege]!
}

type Privilege {
    id: ID!
    name: String!
}

input PingInput {
    msg: String!
}

type Invitation {
    id: ID!
    invitee: User!
    inviter: User!
    teamId: ID!
}

# Mutation
extend type Mutation {
    # create single user
    createUser(user: UserInput!) : User
    # batch create users
    batchCreateUser(users: [UserInput!]!): Reply
    updateUser(user: UserInput!): User
    deleteUser(userId: ID!): Reply

    # Team mutation
    requestJoinTeam(userId: ID!, teamId:ID!): User
    permitJoinTeam(userId: ID!, teamId:ID!): User
    quitTeam(userId: ID!, teamId: ID!): User
    setTeamAdmin(userId:ID!, teamId: ID!): Reply @hasRole(role: TEAM_ADMIN)
    inviteUser(userId:ID!, teamId:ID!): Reply @hasRole(role: TEAM_ADMIN)
    acceptInvitation(userId: ID!, teamId:ID!): Reply

    # Problem mutation
    submitProblem(judgeRequest: JudgeRequestInput!): JudgeRecord
    starProblem(problemId: ID!): Reply
    unstarProblem(problemId: ID!): Reply

    ping(payload: PingInput!) : String
    pingAuth(payload: PingInput!) : String @hasRole(role: ADMIN)
}

# Query
extend type Query {
    currentUser(id: ID!) : User
    users: [User]!
}