type JudgeRequest {
    id: ID!,
    user: User!,
    createdTime: Time!,
    source_code: String!,
    problem: Problem!
}
input JudgeRequestInput {
    userId: ID!,
    problemId: ID!,
    judgeRecordId: ID!,
    code: String!,
}
type JudgeRecord {
    id: ID!,
    user: User!,
    judgeTime: Time!,
    finishedTime: Time!,
    timeCost: Int!,
    memoryCost: Int!,
    status: Int!
}
type JudgeReply {
    id: ID!,
    user: User!,
    judgeTime: Time!,
    finishedTime: Time!,
    timeCost: Int!,
    memoryCost: Int!,
    status: Int!
}

extend type Mutation {
    updateJudgeRecord(recordId: ID!): JudgeRecord
}

extend type Query {
    getRecordsByProblem(problemId: ID!): [JudgeRecord]!
    getRecordsByUser(userId: ID!): [JudgeRecord]!
    getLastRecordByUserAndProblem(problemId: ID!, userId: ID!): JudgeRecord
}