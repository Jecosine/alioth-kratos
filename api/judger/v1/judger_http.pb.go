// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type JudgerHTTPServer interface {
	Ping(context.Context, *PingJudgerRequest) (*PingJudgerReply, error)
	Submit(context.Context, *SubmitJudgerRequest) (*SubmitJudgerReply, error)
}

func RegisterJudgerHTTPServer(s *http.Server, srv JudgerHTTPServer) {
	r := s.Route("/")
	r.GET("/judger/ping", _Judger_Ping1_HTTP_Handler(srv))
	r.POST("/judger/submit", _Judger_Submit0_HTTP_Handler(srv))
}

func _Judger_Ping1_HTTP_Handler(srv JudgerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingJudgerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.judger.v1.Judger/Ping")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingJudgerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingJudgerReply)
		return ctx.Result(200, reply)
	}
}

func _Judger_Submit0_HTTP_Handler(srv JudgerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitJudgerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.judger.v1.Judger/Submit")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Submit(ctx, req.(*SubmitJudgerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitJudgerReply)
		return ctx.Result(200, reply)
	}
}

type JudgerHTTPClient interface {
	Ping(ctx context.Context, req *PingJudgerRequest, opts ...http.CallOption) (rsp *PingJudgerReply, err error)
	Submit(ctx context.Context, req *SubmitJudgerRequest, opts ...http.CallOption) (rsp *SubmitJudgerReply, err error)
}

type JudgerHTTPClientImpl struct {
	cc *http.Client
}

func NewJudgerHTTPClient(client *http.Client) JudgerHTTPClient {
	return &JudgerHTTPClientImpl{client}
}

func (c *JudgerHTTPClientImpl) Ping(ctx context.Context, in *PingJudgerRequest, opts ...http.CallOption) (*PingJudgerReply, error) {
	var out PingJudgerReply
	pattern := "/judger/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.judger.v1.Judger/Ping"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JudgerHTTPClientImpl) Submit(ctx context.Context, in *SubmitJudgerRequest, opts ...http.CallOption) (*SubmitJudgerReply, error) {
	var out SubmitJudgerReply
	pattern := "/judger/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.judger.v1.Judger/Submit"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
