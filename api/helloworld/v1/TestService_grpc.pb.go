// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: helloworld/v1/TestService.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	CreateTestService(ctx context.Context, in *CreateTestServiceRequest, opts ...grpc.CallOption) (*CreateTestServiceReply, error)
	UpdateTestService(ctx context.Context, in *UpdateTestServiceRequest, opts ...grpc.CallOption) (*UpdateTestServiceReply, error)
	DeleteTestService(ctx context.Context, in *DeleteTestServiceRequest, opts ...grpc.CallOption) (*DeleteTestServiceReply, error)
	GetTestService(ctx context.Context, in *GetTestServiceRequest, opts ...grpc.CallOption) (*GetTestServiceReply, error)
	ListTestService(ctx context.Context, in *ListTestServiceRequest, opts ...grpc.CallOption) (*ListTestServiceReply, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) CreateTestService(ctx context.Context, in *CreateTestServiceRequest, opts ...grpc.CallOption) (*CreateTestServiceReply, error) {
	out := new(CreateTestServiceReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.v1.TestService/CreateTestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateTestService(ctx context.Context, in *UpdateTestServiceRequest, opts ...grpc.CallOption) (*UpdateTestServiceReply, error) {
	out := new(UpdateTestServiceReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.v1.TestService/UpdateTestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteTestService(ctx context.Context, in *DeleteTestServiceRequest, opts ...grpc.CallOption) (*DeleteTestServiceReply, error) {
	out := new(DeleteTestServiceReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.v1.TestService/DeleteTestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetTestService(ctx context.Context, in *GetTestServiceRequest, opts ...grpc.CallOption) (*GetTestServiceReply, error) {
	out := new(GetTestServiceReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.v1.TestService/GetTestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ListTestService(ctx context.Context, in *ListTestServiceRequest, opts ...grpc.CallOption) (*ListTestServiceReply, error) {
	out := new(ListTestServiceReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.v1.TestService/ListTestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	CreateTestService(context.Context, *CreateTestServiceRequest) (*CreateTestServiceReply, error)
	UpdateTestService(context.Context, *UpdateTestServiceRequest) (*UpdateTestServiceReply, error)
	DeleteTestService(context.Context, *DeleteTestServiceRequest) (*DeleteTestServiceReply, error)
	GetTestService(context.Context, *GetTestServiceRequest) (*GetTestServiceReply, error)
	ListTestService(context.Context, *ListTestServiceRequest) (*ListTestServiceReply, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) CreateTestService(context.Context, *CreateTestServiceRequest) (*CreateTestServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestService not implemented")
}
func (UnimplementedTestServiceServer) UpdateTestService(context.Context, *UpdateTestServiceRequest) (*UpdateTestServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestService not implemented")
}
func (UnimplementedTestServiceServer) DeleteTestService(context.Context, *DeleteTestServiceRequest) (*DeleteTestServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestService not implemented")
}
func (UnimplementedTestServiceServer) GetTestService(context.Context, *GetTestServiceRequest) (*GetTestServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestService not implemented")
}
func (UnimplementedTestServiceServer) ListTestService(context.Context, *ListTestServiceRequest) (*ListTestServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestService not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_CreateTestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CreateTestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.v1.TestService/CreateTestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CreateTestService(ctx, req.(*CreateTestServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateTestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateTestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.v1.TestService/UpdateTestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateTestService(ctx, req.(*UpdateTestServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteTestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteTestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.v1.TestService/DeleteTestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteTestService(ctx, req.(*DeleteTestServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetTestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.v1.TestService/GetTestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTestService(ctx, req.(*GetTestServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ListTestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ListTestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.v1.TestService/ListTestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ListTestService(ctx, req.(*ListTestServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestService",
			Handler:    _TestService_CreateTestService_Handler,
		},
		{
			MethodName: "UpdateTestService",
			Handler:    _TestService_UpdateTestService_Handler,
		},
		{
			MethodName: "DeleteTestService",
			Handler:    _TestService_DeleteTestService_Handler,
		},
		{
			MethodName: "GetTestService",
			Handler:    _TestService_GetTestService_Handler,
		},
		{
			MethodName: "ListTestService",
			Handler:    _TestService_ListTestService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/TestService.proto",
}
